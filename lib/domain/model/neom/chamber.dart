import 'dart:convert';

import 'package:enum_to_string/enum_to_string.dart';
import 'package:geolocator/geolocator.dart';

import '../../../app_config.dart';
import '../../../utils/core_utilities.dart';
import '../../../utils/enums/owner_type.dart';
import 'chamber_preset.dart';

class Chamber {

  String id; ///Generated by firestore or third-party playlist Id
  String name;
  String description;
  String ownerId;
  String ownerName;
  OwnerType ownerType;
  String href; ///Reference to something in future
  String imgUrl;
  bool public;
  Position? position;
  bool isModifiable;

  List<ChamberPreset>? chamberPresets;

  Chamber({
    this.id = "",
    this.name = "",
    this.description = "",
    this.ownerId = "",
    this.ownerName = "",
    this.ownerType = OwnerType.profile,
    this.href = "",
    this.imgUrl = "",
    this.public = true,
    this.position,
    this.isModifiable = true,
    this.chamberPresets,
  });

  Chamber.createBasic(this.name, desc) :
    id = "",
    description = desc,
    href = "",
    imgUrl = "",
    public = true,
    ownerId = '',
    ownerName = '',
    ownerType = OwnerType.profile,
    chamberPresets = [],
    isModifiable = true;

  Chamber.fromJSON(data) :
    id = data["id"] ?? "",
    name = data["name"] ?? "",
    description = data["description"] ?? "",
    href = data["href"] ?? "",
    imgUrl = data["imgUrl"] ?? "",
    public = data["public"] ?? true,
    isModifiable = data["isModifiable"] ?? true,
    ownerId = data["ownerId"] ?? "",
    ownerName = data["ownerName"] ?? "",
    chamberPresets =  data["chamberPresets"]?.map<ChamberPreset>((preset) {
      return ChamberPreset.fromJSON(preset);
    }).toList() ?? [],
    position = CoreUtilities.JSONtoPosition(data["position"]),
    ownerType = EnumToString.fromString(OwnerType.values, data["ownerType"] ?? OwnerType.profile.name) ?? OwnerType.profile;


  @override
  String toString() {
    return 'Chamber{id: $id, name: $name, description: $description, ownerId: $ownerId, ownerName: $ownerName, ownerType: $ownerType, href: $href, imgUrl: $imgUrl, public: $public, chamberPresets: $chamberPresets, position: $position, isModifiable: $isModifiable}';
  }

  Map<String, dynamic> toJSON()=>{
    //'id': id, generated in firebase
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'chamberPresets': chamberPresets?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'position': jsonEncode(position),
    'ownerType': ownerType.name,
    'isModifiable': isModifiable
  };

  Map<String, dynamic> toJSONWithID()=>{
    'id': id,
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'chamberPresets': chamberPresets?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'position': jsonEncode(position),
    'ownerType': ownerType.name,
    'isModifiable': isModifiable
  };

  List<String> getImgUrls() {

    List<String> imgUrls = [];

    if(imgUrl.isNotEmpty) {
      imgUrls.add(imgUrl);
    }

    if(chamberPresets != null) {
      for (var element in chamberPresets!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        }
      }
    }

    AppConfig.logger.t("Retrieving ${imgUrls.length} total Images for itemlist $name.");
    return imgUrls;
  }

}
