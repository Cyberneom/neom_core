import 'dart:convert';

import 'package:enum_to_string/enum_to_string.dart';
import 'package:geolocator/geolocator.dart';

import '../../app_config.dart';
import '../../utils/core_utilities.dart';
import '../../utils/enums/itemlist_type.dart';
import '../../utils/enums/owner_type.dart';
import 'app_media_item.dart';
import 'app_release_item.dart';

class Itemlist {

  String id; ///Generated by firestore or third-party playlist Id
  String name;
  String description;
  String ownerId;
  String ownerName;
  OwnerType ownerType;
  String href; ///Reference to something in future
  String imgUrl;
  bool public;
  Position? position;
  bool isModifiable;

  List<AppReleaseItem>? appReleaseItems;
  List<AppMediaItem>? appMediaItems;
  String uri; /// A link to the Web API endpoint providing full details of the external list.
  ItemlistType type;

  int? createdTime; ///CREATED TIME ON PLATFORM
  int? modifiedTime; ///TIME OF LAST MODIFICATION
  String? language; ///SPANISH - ENGLISH - ETC

  List<String>? categories; ///CATEGORIES FOR BOOKS | SONGS | PODCASTS | CATEGORIES RETRIEVED FROM WC
  List<String>? tags; ///TAGS OR GENRES FOR BOOKS | SONGS | PODCASTS | TAGS RETRIEVED FROM WC

  Itemlist({
    this.id = "",
    this.name = "",
    this.description = "",
    this.ownerId = "",
    this.ownerName = "",
    this.ownerType = OwnerType.profile,
    this.href = "",
    this.imgUrl = "",
    this.public = true,
    this.position,
    this.isModifiable = true,
    this.appReleaseItems,
    this.appMediaItems,
    this.uri = "",
    this.type = ItemlistType.playlist,
    this.createdTime,
    this.modifiedTime,
    this.language = "",
    this.categories,
    this.tags,
  });

  @override
  String toString() {
    return 'Itemlist{id: $id, name: $name, description: $description, ownerId: $ownerId, ownerName: $ownerName, ownerType: $ownerType, href: $href, imgUrl: $imgUrl, public: $public, position: $position, isModifiable: $isModifiable, appReleaseItems: $appReleaseItems, appMediaItems: $appMediaItems, uri: $uri, type: $type}';
  }

  Itemlist.createBasic(this.name, desc, this.ownerId, this.ownerName, this.type) :
    id = "",
    description = desc,
    href = "",
    imgUrl = "",
    public = true,
    uri = "",
    ownerType = OwnerType.profile,
    appMediaItems = [],
    isModifiable = true;

  Itemlist.fromJSON(data) :
    id = data["id"] ?? "",
    name = data["name"] ?? "",
    description = data["description"] ?? "",
    href = data["href"] ?? "",
    imgUrl = data["imgUrl"] ?? "",
    public = data["public"] ?? true,
    isModifiable = data["isModifiable"] ?? true,
    ownerId = data["ownerId"] ?? "",
    ownerName = data["ownerName"] ?? "",
    uri = data["uri"],
    appMediaItems =  data["appMediaItems"]?.map<AppMediaItem>((item) {
      return AppMediaItem.fromJSON(item);
    }).toList(),
    appReleaseItems = data["appReleaseItems"]?.map<AppReleaseItem>((item) {
      return AppReleaseItem.fromJSON(item);
    }).toList() ?? [],
    position = CoreUtilities.JSONtoPosition(data["position"]),
    type = EnumToString.fromString(ItemlistType.values, data["type"] ?? ItemlistType.playlist.name) ?? ItemlistType.playlist,
    ownerType = EnumToString.fromString(OwnerType.values, data["ownerType"] ?? OwnerType.profile.name) ?? OwnerType.profile,
    categories = List.from(data["categories"]?.cast<String>() ?? []),
    tags = List.from(data["tags"]?.cast<String>() ?? []);

  Map<String, dynamic> toJSON()=>{
    //'id': id, generated in firebase
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'uri': uri,
    'appMediaItems': appMediaItems?.map((appMediaItem) => appMediaItem.toJSON()).toList() ?? [],
    'appReleaseItems': appReleaseItems?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'position': jsonEncode(position),
    'type': type.name,
    'ownerType': ownerType.name,
    'isModifiable': isModifiable,
    'categories': categories,
    'tags': tags
  };

  Map<String, dynamic> toJSONWithID()=>{
    'id': id,
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'uri': uri,
    'appMediaItems': appMediaItems?.map((appMediaItem) => appMediaItem.toJSON()).toList() ?? [],
    'appReleaseItems': appReleaseItems?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'position': position != null ? jsonEncode(position) : null,
    'type': type.name,
    'ownerType': ownerType.name,
    'isModifiable': isModifiable
  };

  int getTotalItems() {
    int totalItems = 0;
    if(appMediaItems != null) totalItems = totalItems + (appMediaItems?.length ?? 0);
    if(appReleaseItems != null) totalItems = totalItems + (appReleaseItems?.length ?? 0);
    AppConfig.logger.t("Retrieving $totalItems Total Items.");
    return totalItems;
  }

  List<String> getImgUrls() {

    Set<String> imgUrls = {};

    if(imgUrl.isNotEmpty) imgUrls.add(imgUrl);

    if(appMediaItems != null) {
      for (var element in appMediaItems!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        } else if(element.allUrls?.isNotEmpty ?? false) {
          imgUrls.add(element.allUrls!.first);
        }
      }
    }

    if(appReleaseItems != null) {
      for (var element in appReleaseItems!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        } else if(element.galleryUrls?.isNotEmpty ?? false) {
          imgUrls.add(element.galleryUrls!.first);
        }
      }

    }

    AppConfig.logger.t("Retrieving ${imgUrls.length} total Images for itemlist $name.");
    return imgUrls.toList();
  }

}
